/**
 * AuthContext Logout Integration Tests
 * Story 1.6: Sign-Out Data Clear & Navigation
 * 
 * Tests AuthContext logout method integration with DataClearingService
 */

import { describe, it, expect, vi, beforeEach } from 'vitest'
import { renderHook, act } from '@testing-library/react'
import { AuthProvider, useAuth } from '../../contexts/AuthContext'

// Mock the data clearing service
const mockDataClearingService = {
  clearAllData: vi.fn(),
  verifyDataCleared: vi.fn()
}

vi.mock('../../services/dataClearingService', () => ({
  dataClearingService: mockDataClearingService
}))

// Mock auth service
const mockAuthService = {
  signOut: vi.fn()
}

vi.mock('../../services/authService', () => ({
  authService: mockAuthService
}))

describe('AuthContext Logout Integration', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    mockDataClearingService.clearAllData.mockResolvedValue({
      success: true,
      clearedData: {
        localStorage: true,
        attendeeInfo: true,
        pwaCache: true,
        indexedDB: true,
        serviceWorkerCaches: true
      },
      errors: []
    })
    mockDataClearingService.verifyDataCleared.mockResolvedValue(true)
    mockAuthService.signOut.mockResolvedValue({ success: true })
  })

  it('should call DataClearingService when logout is called', async () => {
    const { result } = renderHook(() => useAuth(), {
      wrapper: AuthProvider
    })

    await act(async () => {
      await result.current.logout()
    })

    expect(mockDataClearingService.clearAllData).toHaveBeenCalled()
    expect(mockAuthService.signOut).toHaveBeenCalled()
    expect(mockDataClearingService.verifyDataCleared).toHaveBeenCalled()
  })

  it('should handle data clearing errors gracefully', async () => {
    mockDataClearingService.clearAllData.mockRejectedValue(new Error('Data clearing failed'))

    const { result } = renderHook(() => useAuth(), {
      wrapper: AuthProvider
    })

    await act(async () => {
      const logoutResult = await result.current.logout()
      expect(logoutResult.success).toBe(false)
      expect(logoutResult.error).toContain('Data clearing failed')
    })
  })

  it('should prevent concurrent logout operations', async () => {
    const { result } = renderHook(() => useAuth(), {
      wrapper: AuthProvider
    })

    // Start first logout
    const firstLogout = act(async () => {
      return result.current.logout()
    })

    // Try to start second logout immediately
    const secondLogout = act(async () => {
      return result.current.logout()
    })

    await firstLogout
    await secondLogout

    // Should only call data clearing once
    expect(mockDataClearingService.clearAllData).toHaveBeenCalledTimes(1)
  })

  it('should provide performance metrics', async () => {
    const { result } = renderHook(() => useAuth(), {
      wrapper: AuthProvider
    })

    await act(async () => {
      const logoutResult = await result.current.logout()
      expect(logoutResult.performanceMetrics).toBeDefined()
      expect(logoutResult.performanceMetrics.duration).toBeGreaterThan(0)
    })
  })
})


